//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace gMVVM.SessionService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SessionService.ISessionService")]
    public interface ISessionService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISessionService/GetSession", ReplyAction="http://tempuri.org/ISessionService/GetSessionResponse")]
        System.IAsyncResult BeginGetSession(string key, System.AsyncCallback callback, object asyncState);
        
        object EndGetSession(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISessionService/SetSession", ReplyAction="http://tempuri.org/ISessionService/SetSessionResponse")]
        System.IAsyncResult BeginSetSession(string key, object value, System.AsyncCallback callback, object asyncState);
        
        bool EndSetSession(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISessionServiceChannel : gMVVM.SessionService.ISessionService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public object Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SetSessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SetSessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SessionServiceClient : System.ServiceModel.ClientBase<gMVVM.SessionService.ISessionService>, gMVVM.SessionService.ISessionService {
        
        private BeginOperationDelegate onBeginGetSessionDelegate;
        
        private EndOperationDelegate onEndGetSessionDelegate;
        
        private System.Threading.SendOrPostCallback onGetSessionCompletedDelegate;
        
        private BeginOperationDelegate onBeginSetSessionDelegate;
        
        private EndOperationDelegate onEndSetSessionDelegate;
        
        private System.Threading.SendOrPostCallback onSetSessionCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public SessionServiceClient() {
        }
        
        public SessionServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SessionServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SessionServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SessionServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetSessionCompletedEventArgs> GetSessionCompleted;
        
        public event System.EventHandler<SetSessionCompletedEventArgs> SetSessionCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult gMVVM.SessionService.ISessionService.BeginGetSession(string key, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSession(key, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        object gMVVM.SessionService.ISessionService.EndGetSession(System.IAsyncResult result) {
            return base.Channel.EndGetSession(result);
        }
        
        private System.IAsyncResult OnBeginGetSession(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string key = ((string)(inValues[0]));
            return ((gMVVM.SessionService.ISessionService)(this)).BeginGetSession(key, callback, asyncState);
        }
        
        private object[] OnEndGetSession(System.IAsyncResult result) {
            object retVal = ((gMVVM.SessionService.ISessionService)(this)).EndGetSession(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSessionCompleted(object state) {
            if ((this.GetSessionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSessionCompleted(this, new GetSessionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSessionAsync(string key) {
            this.GetSessionAsync(key, null);
        }
        
        public void GetSessionAsync(string key, object userState) {
            if ((this.onBeginGetSessionDelegate == null)) {
                this.onBeginGetSessionDelegate = new BeginOperationDelegate(this.OnBeginGetSession);
            }
            if ((this.onEndGetSessionDelegate == null)) {
                this.onEndGetSessionDelegate = new EndOperationDelegate(this.OnEndGetSession);
            }
            if ((this.onGetSessionCompletedDelegate == null)) {
                this.onGetSessionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSessionCompleted);
            }
            base.InvokeAsync(this.onBeginGetSessionDelegate, new object[] {
                        key}, this.onEndGetSessionDelegate, this.onGetSessionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult gMVVM.SessionService.ISessionService.BeginSetSession(string key, object value, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetSession(key, value, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool gMVVM.SessionService.ISessionService.EndSetSession(System.IAsyncResult result) {
            return base.Channel.EndSetSession(result);
        }
        
        private System.IAsyncResult OnBeginSetSession(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string key = ((string)(inValues[0]));
            object value = ((object)(inValues[1]));
            return ((gMVVM.SessionService.ISessionService)(this)).BeginSetSession(key, value, callback, asyncState);
        }
        
        private object[] OnEndSetSession(System.IAsyncResult result) {
            bool retVal = ((gMVVM.SessionService.ISessionService)(this)).EndSetSession(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSetSessionCompleted(object state) {
            if ((this.SetSessionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetSessionCompleted(this, new SetSessionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetSessionAsync(string key, object value) {
            this.SetSessionAsync(key, value, null);
        }
        
        public void SetSessionAsync(string key, object value, object userState) {
            if ((this.onBeginSetSessionDelegate == null)) {
                this.onBeginSetSessionDelegate = new BeginOperationDelegate(this.OnBeginSetSession);
            }
            if ((this.onEndSetSessionDelegate == null)) {
                this.onEndSetSessionDelegate = new EndOperationDelegate(this.OnEndSetSession);
            }
            if ((this.onSetSessionCompletedDelegate == null)) {
                this.onSetSessionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetSessionCompleted);
            }
            base.InvokeAsync(this.onBeginSetSessionDelegate, new object[] {
                        key,
                        value}, this.onEndSetSessionDelegate, this.onSetSessionCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override gMVVM.SessionService.ISessionService CreateChannel() {
            return new SessionServiceClientChannel(this);
        }
        
        private class SessionServiceClientChannel : ChannelBase<gMVVM.SessionService.ISessionService>, gMVVM.SessionService.ISessionService {
            
            public SessionServiceClientChannel(System.ServiceModel.ClientBase<gMVVM.SessionService.ISessionService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetSession(string key, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = key;
                System.IAsyncResult _result = base.BeginInvoke("GetSession", _args, callback, asyncState);
                return _result;
            }
            
            public object EndGetSession(System.IAsyncResult result) {
                object[] _args = new object[0];
                object _result = ((object)(base.EndInvoke("GetSession", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSetSession(string key, object value, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = key;
                _args[1] = value;
                System.IAsyncResult _result = base.BeginInvoke("SetSession", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndSetSession(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("SetSession", _args, result)));
                return _result;
            }
        }
    }
}
